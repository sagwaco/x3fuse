name: "Create Release"

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

concurrency:
  group: publish-release${{ github.ref }}
  cancel-in-progress: true

jobs:
  preparation:
    name: Preparation job
    if: ${{ github.event.issue.pull_request != null && contains(github.event.comment.body, '/release') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check permissions
        uses: actions/github-script@v6
        with:
          script: |
            const commenter = context.payload.comment.user.login;
            const { data: { permission } } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: commenter,
            });

            if (permission !== 'admin' && permission !== 'write') {
              core.setFailed(`User ${commenter} does not have write permissions`);
            }

            console.log(`User ${commenter} has ${permission} permission`);

      - name: Add reactions
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: eyes

      - uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            if (pr.data.draft || pr.data.mergeable_state !== "clean") {
              core.setFailed("PR is not ready to be merged");
            }

      - uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - uses: actions/checkout@v3
        if: success()
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Extract latest changes
        id: latest_changes
        run: |
          bash ./Configuration/release.sh > release_info.txt

          # Extract values from the script output
          LATEST_VERSION=$(grep "Latest Version:" release_info.txt | cut -d' ' -f3)
          LATEST_TITLE=$(grep "Latest Title:" release_info.txt | cut -d' ' -f3- | sed 's/Latest Title: //')
          PREVIOUS_VERSION=$(grep "Previous Version:" release_info.txt | cut -d' ' -f3)

          # Extract release notes (everything after "Release Notes:")
          sed -n '/Release Notes:/,$p' release_info.txt | tail -n +2 > latest_changes

          echo "$LATEST_VERSION" > new_version
          echo "$LATEST_TITLE" > title

          echo "Latest Version: $LATEST_VERSION"
          echo "Latest Title: $LATEST_TITLE"
          echo "Previous Version: $PREVIOUS_VERSION"

      - name: Save generated info
        uses: actions/upload-artifact@master
        with:
          path: |
            new_version
            title
            latest_changes

      - name: Clean up generated files for sync
        run: |
          rm -f latest_changes title new_version release_info.txt

      - name: Sync branch
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: ${{ steps.comment-branch.outputs.base_ref }}
          target_branch: ${{ steps.comment-branch.outputs.head_ref }}
          github_token: ${{ github.token }}

  archive:
    name: Build and export app
    runs-on: macos-latest
    needs: preparation
    steps:
      - uses: actions/download-artifact@master
        with:
          path: artifacts

      - name: Parse info generated in preparation job
        id: info
        run: |
          echo "new_version=$(cat artifacts/artifact/new_version)" >> $GITHUB_OUTPUT
          echo "title=$(cat artifacts/artifact/title)" >> $GITHUB_OUTPUT

      - uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - uses: actions/checkout@v3
        if: success()
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Verify Xcode version
        run: |
          echo "Selected Xcode version:"
          xcodebuild -version

      - name: Override versions in project
        run: |
          # Update version in Info.plist - add keys if they don't exist
          /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string ${{ steps.info.outputs.new_version }}" X3Fuse/Info.plist 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ steps.info.outputs.new_version }}" X3Fuse/Info.plist

          /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string ${{ steps.info.outputs.new_version }}" X3Fuse/Info.plist 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ steps.info.outputs.new_version }}" X3Fuse/Info.plist

          # Update version in Xcode project - find current version first
          CURRENT_VERSION=$(grep -o 'MARKETING_VERSION = [^;]*' X3Fuse.xcodeproj/project.pbxproj | head -1 | cut -d' ' -f3)
          sed -i '' "s/MARKETING_VERSION = $CURRENT_VERSION/MARKETING_VERSION = ${{ steps.info.outputs.new_version }}/g" X3Fuse.xcodeproj/project.pbxproj
          sed -i '' "s/CURRENT_PROJECT_VERSION = $CURRENT_VERSION/CURRENT_PROJECT_VERSION = ${{ steps.info.outputs.new_version }}/g" X3Fuse.xcodeproj/project.pbxproj

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          # List certificates to verify correct import
          echo "Available certificates:"
          security find-identity -v -p codesigning $KEYCHAIN_PATH

      - name: Build and archive
        run: |
          # Get the provisioning profile UUID
          PROVISION_UUID=$(grep -A1 UUID ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | grep -o '[0-9a-fA-F]\{8\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{12\}' | head -1)

          xcodebuild clean archive \
            -project X3Fuse.xcodeproj \
            -scheme X3Fuse \
            -configuration Release \
            -archivePath X3Fuse \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Developer ID Application" \
            DEVELOPMENT_TEAM="RPKWZLZ8NN" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISION_UUID" \
            OTHER_CODE_SIGN_FLAGS="--timestamp --options=runtime"

      - name: Export app
        run: |
          # Create export options
          # Get the provisioning profile UUID for export options
          PROVISION_UUID=$(grep -A1 UUID ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | grep -o '[0-9a-fA-F]\{8\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{12\}' | head -1)

          cat > export_options.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>developer-id</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Developer ID Application</string>
              <key>teamID</key>
              <string>RPKWZLZ8NN</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.sagwa.X3Fuse</key>
                  <string>$PROVISION_UUID</string>
              </dict>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath "X3Fuse.xcarchive" \
            -exportPath Release \
            -exportOptionsPlist "export_options.plist"

      - name: Create ZIP archive
        run: |
          cd Release
          zip -r X3Fuse.zip X3Fuse.app
          cd ..

      - name: Generate macOS installer
        uses: akiojin/generate-mac-installer-github-action@v0.1.0
        id: generate_installer
        with:
          output-directory: ${{ runner.temp }}
          root-directory: Release
          bundle-path: X3Fuse.app
          identifier: com.sagwa.X3Fuse
          version: ${{ steps.info.outputs.new_version }}

      - name: Move installer to Release directory
        run: |
          mv "${{ steps.generate_installer.outputs.output-path }}" Release/X3Fuse.pkg

      - name: Upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: app
          path: |
            Release/X3Fuse.pkg
            Release/X3Fuse.zip

  release:
    name: "Create Release"
    runs-on: macos-latest
    needs: archive
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - uses: actions/checkout@v3
        if: success()
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - uses: actions/download-artifact@master
        with:
          path: artifacts

      - name: Parse info generated in preparation job
        id: info
        run: |
          echo "new_version=$(cat artifacts/artifact/new_version)" >> $GITHUB_OUTPUT
          echo "title=$(cat artifacts/artifact/title)" >> $GITHUB_OUTPUT
          mv artifacts/artifact/new_version new_version
          mv artifacts/artifact/title title
          mv artifacts/artifact/latest_changes latest_changes
          mkdir Release
          mv artifacts/app/X3Fuse.pkg Release/
          mv artifacts/app/X3Fuse.zip Release/

      - name: Prepare Sparkle update creation
        env:
          SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
        run: |
          # Debug: Check if private key environment variable is set
          if [ -z "$SPARKLE_PRIVATE_KEY" ]; then
            echo "ERROR: SPARKLE_PRIVATE_KEY environment variable is empty!"
            exit 1
          fi

          # Clean up Release directory
          rm -rf Release/*.log
          rm -rf Release/*.plist

          # List Release directory contents
          echo "Release directory contents:"
          ls -la Release/

      - name: Setup Sparkle
        run: |
          # Download Sparkle
          curl -L -o Sparkle.tar.xz https://github.com/sparkle-project/Sparkle/releases/download/2.5.2/Sparkle-2.5.2.tar.xz
          tar -xf Sparkle.tar.xz
          cp bin/generate_appcast ./Configuration/generate_appcast
          chmod +x ./Configuration/generate_appcast

      - name: Update appcast
        run: |
          # Create a temporary directory for appcast generation
          mkdir -p appcast_temp
          cp Release/X3Fuse.zip appcast_temp/

          # Generate appcast using the zip file
          echo "$SPARKLE_PRIVATE_KEY" | ./Configuration/generate_appcast --ed-key-file - --link "https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases" --download-url-prefix "https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/download/v${{ steps.info.outputs.new_version }}/" -o docs/Support/appcast.xml appcast_temp/

          # Clean up temporary directory
          rm -rf appcast_temp

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.info.outputs.new_version }} - ${{ steps.info.outputs.title }}
          tag_name: v${{ steps.info.outputs.new_version }}
          fail_on_unmatched_files: true
          body_path: latest_changes
          files: |
            Release/X3Fuse.pkg
            Release/X3Fuse.zip

      - name: Saving changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: |
            docs/Support/appcast.xml
            X3Fuse.xcodeproj/project.pbxproj
            X3Fuse/Info.plist
          commit_message: "Update version to v${{ steps.info.outputs.new_version }}"

      - name: Create summary
        run: |
          echo "Release v${{ steps.info.outputs.new_version }} created." > $GITHUB_STEP_SUMMARY

  ending:
    name: Ending job
    if: always()
    runs-on: ubuntu-latest
    needs: [preparation, archive, release]
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Merge PR
        if: ${{ needs.preparation.result == 'success' && needs.archive.result == 'success' && needs.release.result == 'success' }}
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: ${{ steps.comment-branch.outputs.head_ref }}
          target_branch: ${{ steps.comment-branch.outputs.base_ref }}
          github_token: ${{ github.token }}
          message: "Release version v${{ needs.release.outputs.new_version }}"

      - uses: geekyeggo/delete-artifact@v5
        with:
          name: "*"
          failOnError: false

      - name: Add success reactions
        if: ${{ contains(join(needs.*.result, ','), 'success') }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: rocket

      - name: Add negative reaction
        if: ${{ contains(join(needs.*.result, ','), 'failure') }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: confused
